<?php
// $Id$

/**
 * @file
 * Provides an example shipping method for Drupal Commerce for testing and
 * development.
 */

/**
 * Implements hook_commerce_shipping_method_info().
 */
function commerce_shipping_example_commerce_shipping_method_info() {
  $shipping_methods = array();

  $shipping_methods['commerce_shipping_example'] = array(
    'title' => t('USPS Ground'),
    'description' => t('Postal Service ground shipping.'),
    'calculate_shipping' => 'commerce_shipping_example_commerce_calculate_shipping', // This is the default value.
  );

  return $shipping_methods;
}

/**
 * @param $stored_values
 *  An array of the values stored in the rule settings
 *
 * @return Form settings definition
 */
function commerce_shipping_example_settings_form($stored_values) {
  $form = array();

  $form['shipping_price'] = array(
    '#type' => 'textfield',
    '#title' => t('Shipping price'),
    '#description' => t('Configure what the shipping price per order should be.'),
    '#default_value' => is_array($stored_values) && isset($stored_values['shipping_price']) ? $stored_values['shipping_price'] : 42,
    '#element_validate' => array('rules_ui_element_decimal_validate'),
  );

  return $form;
}

/**
 * Shipping method callback: calculate shipping.
 *   Calculate shipping price for an order.
 *
 * @param $settings.
 *    The settings saved for the rule triggering the shipping calculation.
 * @param $order.
 *    The fully loaded order
 * @param $currency_code.
 *    The suggested currency code to use for the shipping method price calculation.
 *
 * @return array of values, one for each line item created containing one of.
 *  - (array) containing any of these keys: 'amount', 'currency_code', 'quantity', 'label'
 *  - (int) the price of the shipping, the order currency will be used, formatted as integer.
 *
 * @see commerce_currency_amount_to_integer
 */
function commerce_shipping_example_calculate_shipping($settings, $order, $currency_code) {
  // For this simple method, the price is always 42.
  $shipping_line_items = array();
  $amount = isset($settings['rules_settings']['shipping_price']) ? $settings['rules_settings']['shipping_price'] : 42;
  $shipping_line_items[] = array(
    'amount' => $amount,
    'currency_code' => $currency_code,
    'label' => t('USPS Ground'),
  );
##  if (isset($settings['checkout_settings']['express']) && $settings['checkout_settings']['express']) {
##    $amount = isset($settings['rules_settings']['shipping_price']) ? $settings['rules_settings']['shipping_price'] : 42;
##    $shipping_line_items[] = array(
##      'amount' => commerce_currency_amount_to_integer($amount, $currency_code),
##      'currency_code' => $currency_code,
##      'label' => t('Express fee'),
##    );
##  }
  return $shipping_line_items;
}

/**
 * Shipping method callback: checkout form.
 */

function commerce_shipping_example_submit_form($shipping_method, $pane_values, $checkout_pane, $order) {
  $form = array();

  // Merge in values from the order.
  if (!empty($order->data['commerce_shipping_example'])) {
    $pane_values += $order->data['commerce_shipping_example'];
  }

  // Merge in default values.
  $pane_values += array(
    'express' => 0,
    'name' => '',
  );

#  $form['express'] = array(
#    '#type' => 'checkbox',
#    '#title' => t('Express delivery'),
#    '#description' => t('Express delivery cost twice the normal amount.'),
#    '#default_value' => $pane_values['express'],
#  );

#  $form['name'] = array(
#    '#type' => 'textfield',
#    '#title' => t('Name'),
#    '#description' => t('This is a demonstration field coded to fail validation for single character values.'),
#    '#default_value' => $pane_values['name'],
#    '#required' => TRUE,
#  );

  return $form;
}

/**
 * Shipping method callback: checkout form validation.
 */
function commerce_shipping_example_submit_form_validate($shipping_method, $pane_form, $pane_values, $order, $form_parents = array()) {
##  // Throw an error if a long enough name was not provided.
##  if (strlen($pane_values['name']) < 2) {
##    form_set_error(implode('][', array_merge($form_parents, array('name'))), t('You must enter a name two or more characters long.'));

##    // Even though the form error is enough to stop the submission of the form,
##    // it's not enough to stop it from a Commerce standpoint because of the
##    // combined validation / submission going on per-pane in the checkout form.
##    return FALSE;
##  }
}

/**
 * Payment method callback: checkout form submission.
 */
function commerce_shipping_example_submit_form_submit($shipping_method, $pane_form, $pane_values, $order) {
  // This method is not needed, but allows shipping methods to react to the
  // form submission if needed and could alter the order if needed.
}
